rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isGuest() { return isSignedIn() && request.auth.token.firebase.sign_in_provider == "anonymous"; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    function roleOf(uid) { return get(/databases/$(database)/documents/users/$(uid)).data.role; }
    function isAdmin() { return isSignedIn() && roleOf(request.auth.uid) in ['admin','adminpp']; }
    function isAdminPP() { return isSignedIn() && roleOf(request.auth.uid) == 'adminpp'; }

    // ---- Users ----
    match /users/{uid} {
      allow read: if isSignedIn();
      allow create: if !isGuest() && isOwner(uid);   // ✅ kendi kaydını açabilsin
      allow update: if !isGuest() && (isOwner(uid) || isAdminPP());
    }

    // ---- Tasks ----
    match /tasks/{taskId} {
      allow read: if isSignedIn();
      allow create: if !isGuest() && request.resource.data.ownerUid == request.auth.uid; // ✅
      allow update, delete: if !isGuest() && (resource.data.ownerUid == request.auth.uid || isAdminPP());
    }

    // ---- Presence ----
    match /presence/{uid} {
      allow read: if isSignedIn();
      allow create, update: if !isGuest() && isOwner(uid);
    }

    // ---- Themes sync ----
    match /meta/themesSync/{uid} {
      allow read: if isSignedIn();
      allow write: if !isGuest() && (isOwner(uid) || isAdminPP());
    }

    // ---- Rewards ----
    match /rewards/{rewardId} {
      allow read: if isSignedIn();
      allow create: if !isGuest() && request.resource.data.userId == request.auth.uid;  // ✅
      allow update: if !isGuest() && resource.data.userId == request.auth.uid;
      allow delete: if !isGuest() && resource.data.userId == request.auth.uid;
    }
  }
}
